name: Cleanup Old Releases

on:
  # Run after a release is published
  
  release:
    types: [published]
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Optional: Run weekly to clean up any missed releases
  schedule:
    - cron: '0 2 * * 0'  # Every Sunday at 2 AM UTC

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to delete releases
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Cleanup old releases
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const keepCount = 3; // Number of releases to keep
            
            console.log(`Fetching releases for ${owner}/${repo}`);
            
            try {
              // Get all releases, sorted by creation date (newest first)
              const { data: releases } = await github.rest.repos.listReleases({
                owner,
                repo,
                per_page: 100
              });
              
              console.log(`Found ${releases.length} total releases`);
              
              if (releases.length <= keepCount) {
                console.log(`Only ${releases.length} releases found. Nothing to delete.`);
                return;
              }
              
              // Sort releases by created_at date (newest first)
              const sortedReleases = releases.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
              );
              
              // Get releases to delete (all except the newest keepCount)
              const releasesToDelete = sortedReleases.slice(keepCount);
              
              console.log(`Keeping ${keepCount} newest releases:`);
              sortedReleases.slice(0, keepCount).forEach((release, index) => {
                console.log(`  ${index + 1}. ${release.tag_name} (${release.name || 'Unnamed'}) - ${release.created_at}`);
              });
              
              console.log(`\nDeleting ${releasesToDelete.length} old releases:`);
              
              let deletedCount = 0;
              let errorCount = 0;
              
              for (const release of releasesToDelete) {
                try {
                  console.log(`  Deleting: ${release.tag_name} (${release.name || 'Unnamed'}) - ${release.created_at}`);
                  
                  await github.rest.repos.deleteRelease({
                    owner,
                    repo,
                    release_id: release.id
                  });
                  
                  deletedCount++;
                  console.log(`    ‚úÖ Deleted release: ${release.tag_name}`);
                  
                  // Optional: Delete the associated git tag as well
                  // Uncomment the following block if you want to delete tags too
                  /*
                  try {
                    await github.rest.git.deleteRef({
                      owner,
                      repo,
                      ref: `tags/${release.tag_name}`
                    });
                    console.log(`    ‚úÖ Deleted tag: ${release.tag_name}`);
                  } catch (tagError) {
                    console.log(`    ‚ö†Ô∏è  Could not delete tag ${release.tag_name}: ${tagError.message}`);
                  }
                  */
                  
                } catch (error) {
                  errorCount++;
                  console.log(`    ‚ùå Failed to delete release ${release.tag_name}: ${error.message}`);
                }
                
                // Add a small delay to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 500));
              }
              
              console.log(`\nüìä Cleanup Summary:`);
              console.log(`  ‚Ä¢ Successfully deleted: ${deletedCount} releases`);
              console.log(`  ‚Ä¢ Errors: ${errorCount}`);
              console.log(`  ‚Ä¢ Remaining releases: ${keepCount}`);
              
              if (errorCount > 0) {
                core.setFailed(`Completed with ${errorCount} errors. Check logs for details.`);
              }
              
            } catch (error) {
              console.error('‚ùå Fatal error during cleanup:', error);
              core.setFailed(`Failed to cleanup releases: ${error.message}`);
            }
