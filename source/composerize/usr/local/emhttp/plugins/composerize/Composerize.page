---
Title="Composerize"
Icon="composerize.png"
Type="xmenu"
Menu="Utilities"
---
<?php

/**
 * Composerize Plugin UI for Unraid 7.
 */

define('PLUGIN_ROOT', '/plugins/composerize');
define('PLUGIN_API_URL', PLUGIN_ROOT . '/api.php');

require_once '/usr/local/emhttp/plugins/composerize/include/composerize.php';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Composerize</title>
    <style>
        :root {
            --primary-bg: #2d3748;
            --secondary-bg: #4a5568;
            --border-color: #718096;
            --text-color: #e2e8f0;
            --accent-color: #38a169;
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--primary-bg);
            color: var(--text-color);
            margin: 0;
            padding: 1.5rem;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        .panel {
            background-color: var(--secondary-bg);
            border-radius: 0.5rem;
            padding: 1.5rem;
        }
        h2 {
            margin-top: 0;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
        }
        select, textarea, button {
            width: 100%;
            padding: 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid var(--border-color);
            background-color: var(--primary-bg);
            color: var(--text-color);
            font-size: 1rem;
        }
        textarea {
            font-family: 'Fira Code', 'Cascadia Code', monospace;
            min-height: 400px;
            resize: vertical;
        }
        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }
        button {
            cursor: pointer;
            font-weight: 600;
            border: none;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        #submit-button { background-color: var(--accent-color); }
        #undo-button { background-color: #d69e2e; }
        #reset-button { background-color: #9b2c2c; }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Fira+Code&display=swap" rel="stylesheet">
</head>
<body>
<div class="container">
    <div class="panel">
        <h2>Select a Template</h2>
        <select id="template-select">
            <option value="" selected>Choose a template...</option>
            <?php foreach (getDockerTemplateList() as $name => $command): ?>
                <option value="<?= htmlspecialchars($command); ?>"><?= htmlspecialchars($name); ?></option>
            <?php endforeach; ?>
        </select>
    </div>
    <div class="panel">
        <h2>Compose Preview</h2>
        <!-- The form now submits to Unraid's script handler -->
        <form id="compose-form" method="post" onsubmit="return handleApply();">
            <textarea id="compose-text" name="compose" spellcheck="false" placeholder="Select a template to see the Docker Compose preview..."></textarea>
            <input type="hidden" id="stack-name" name="name" value="">
            <input type="hidden" id="force-overwrite" name="force" value="false">
            
            <div class="button-group">
                <button type="submit" id="submit-button" disabled>Apply</button>
                <button type="button" id="undo-button" disabled>Revert Changes</button>
                <button type="button" id="reset-button">Reset</button>
            </div>
        </form>
    </div>
</div>

<script src="<?= htmlspecialchars(PLUGIN_ROOT); ?>/js/composerize.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const templateSelect = document.getElementById('template-select');
    const composeText = document.getElementById('compose-text');
    const submitButton = document.getElementById('submit-button');
    const undoButton = document.getElementById('undo-button');
    const resetButton = document.getElementById('reset-button');
    const stackNameInput = document.getElementById('stack-name');
    const form = document.getElementById('compose-form');
    let originalCompose = '';

    function handleApply() {
        const name = stackNameInput.value;
        const compose = composeText.value;
        if (!name || !compose) {
            alert('Please select a template and ensure the compose preview is not empty.');
            return false; // Prevent form submission
        }
        
        // Use Unraid's built-in openBox function to show the script output in a modal
        openBox("<?= htmlspecialchars(PLUGIN_API_URL); ?>", "Installing Stack", 600, 800, true);
        
        // We need to manually submit the form data via a hidden iframe
        // because openBox does not handle POST data.
        const iframe = document.createElement('iframe');
        iframe.name = 'hidden-form-target';
        iframe.style.display = 'none';
        document.body.appendChild(iframe);
        
        form.target = 'hidden-form-target';
        form.action = "<?= htmlspecialchars(PLUGIN_API_URL); ?>";
        form.submit();

        // Prevent the main page from navigating
        return false;
    }
    
    // Attach the handler to the form's onsubmit event
    form.onsubmit = handleApply;

    templateSelect.addEventListener('change', () => {
        const selectedOption = templateSelect.options[templateSelect.selectedIndex];
        const command = selectedOption.value;
        if (command) {
            originalCompose = composerize(command);
            composeText.value = originalCompose;
            stackNameInput.value = selectedOption.text;
            submitButton.disabled = false;
            undoButton.disabled = false;
        } else {
            originalCompose = '';
            composeText.value = '';
            stackNameInput.value = '';
            submitButton.disabled = true;
            undoButton.disabled = true;
        }
    });

    undoButton.addEventListener('click', () => { composeText.value = originalCompose; });

    resetButton.addEventListener('click', () => {
        templateSelect.selectedIndex = 0;
        templateSelect.dispatchEvent(new Event('change'));
    });
});
</script>
</body>
</html>
