<?php
// FILE: source/composerize/usr/local/emhttp/plugins/composerize/Composerize.page
// NOTE: The declare(strict_types=1); line has been removed to ensure compatibility.
?>
---
Title="Composerize"
Icon="composerize.png"
Type="xmenu"
Menu="Utilities"
---
<?php
/**
 * Composerize Plugin UI for Unraid 7.
 */

define('PLUGIN_ROOT', '/plugins/composerize');
define('PLUGIN_API_URL', PLUGIN_ROOT . '/api.php');

// Use an absolute path to ensure the file is found correctly within the Unraid GUI.
require_once '/usr/local/emhttp/plugins/composerize/include/composerize.php';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Composerize</title>
    <style>
        :root {
            --primary-bg: #2d3748;
            --secondary-bg: #4a5568;
            --border-color: #718096;
            --text-color: #e2e8f0;
            --accent-color: #38a169;
            --error-color: #c53030;
            --font-family: 'Inter', sans-serif;
            --monospace-font: 'Fira Code', 'Cascadia Code', monospace;
        }
        body {
            font-family: var(--font-family);
            background-color: var(--primary-bg);
            color: var(--text-color);
            margin: 0;
            padding: 1.5rem;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        .panel {
            background-color: var(--secondary-bg);
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);
        }
        h2 {
            margin-top: 0;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
            font-weight: 600;
        }
        select, textarea, button {
            width: 100%;
            padding: 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid var(--border-color);
            background-color: var(--primary-bg);
            color: var(--text-color);
            font-size: 1rem;
            transition: all 0.2s ease-in-out;
        }
        select:focus, textarea:focus, button:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(56, 161, 105, 0.4);
        }
        textarea {
            font-family: var(--monospace-font);
            min-height: 400px;
            resize: vertical;
        }
        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }
        button {
            cursor: pointer;
            font-weight: 600;
            border: none;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        #submit-button { background-color: var(--accent-color); }
        #undo-button { background-color: #d69e2e; }
        #reset-button { background-color: #9b2c2c; }
        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.6); display: flex;
            align-items: center; justify-content: center; z-index: 1000;
            opacity: 0; transition: opacity 0.3s ease; pointer-events: none;
        }
        .modal-overlay.visible { opacity: 1; pointer-events: auto; }
        .modal-content {
            background: var(--secondary-bg); padding: 2rem; border-radius: 0.5rem;
            text-align: center; max-width: 400px; transform: scale(0.9);
            transition: transform 0.3s ease;
        }
        .modal-overlay.visible .modal-content { transform: scale(1); }
        .modal-buttons { margin-top: 1.5rem; display: flex; gap: 1rem; justify-content: center; }
        .modal-buttons button { width: auto; padding: 0.5rem 1.5rem; }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Fira+Code&display=swap" rel="stylesheet">
</head>
<body>
<div class="container">
    <div class="panel">
        <h2>Select a Template</h2>
        <select id="template-select">
            <option value="" selected>Choose a template...</option>
            <?php foreach (getDockerTemplateList() as $name => $xmlPath): ?>
                <option value="<?= htmlspecialchars($xmlPath); ?>"><?= htmlspecialchars($name); ?></option>
            <?php endforeach; ?>
        </select>
    </div>
    <div class="panel">
        <h2>Compose Preview</h2>
        <textarea id="compose-text" spellcheck="false" placeholder="Select a template to see the Docker Compose preview..."></textarea>
        <div class="button-group">
            <button id="submit-button" disabled>Apply</button>
            <button id="undo-button" disabled>Revert Changes</button>
            <button id="reset-button">Reset</button>
        </div>
    </div>
</div>
<div id="notification-modal" class="modal-overlay">
    <div class="modal-content">
        <h3 id="modal-title"></h3>
        <p id="modal-text"></p>
        <div id="modal-buttons" class="modal-buttons"></div>
    </div>
</div>
<script src="<?= htmlspecialchars(PLUGIN_ROOT); ?>/js/composerize.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const templateSelect = document.getElementById('template-select');
    const composeText = document.getElementById('compose-text');
    const submitButton = document.getElementById('submit-button');
    const undoButton = document.getElementById('undo-button');
    const resetButton = document.getElementById('reset-button');
    let originalCompose = '';

    const showNotification = (title, text, buttons = [{ label: 'OK', action: hideNotification }]) => {
        document.getElementById('modal-title').textContent = title;
        document.getElementById('modal-text').textContent = text;
        const modalButtons = document.getElementById('modal-buttons');
        modalButtons.innerHTML = '';
        buttons.forEach(btnInfo => {
            const button = document.createElement('button');
            button.textContent = btnInfo.label;
            button.onclick = btnInfo.action;
            if (btnInfo.class) button.className = btnInfo.class;
            modalButtons.appendChild(button);
        });
        document.getElementById('notification-modal').classList.add('visible');
    };

    const hideNotification = () => {
        document.getElementById('notification-modal').classList.remove('visible');
    };

    const makeApiRequest = async (name, compose, force = false) => {
        try {
            const formData = new FormData();
            formData.append('name', name);
            formData.append('compose', compose);
            formData.append('force', String(force));

            const response = await fetch('<?= htmlspecialchars(PLUGIN_API_URL); ?>', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (response.ok) {
                showNotification('Success!', result.message);
            } else if (response.status === 409) {
                showNotification('Stack Exists', result.error, [
                    { label: 'Cancel', action: hideNotification },
                    { label: 'Overwrite', class: 'error', action: () => {
                        hideNotification();
                        makeApiRequest(name, compose, true);
                    }}
                ]);
            } else {
                showNotification('Error!', result.error || 'An unknown error occurred.');
            }
        } catch (error) {
            console.error('API Request Failed:', error);
            showNotification('Network Error', 'Could not connect to the server.');
        }
    };

    templateSelect.addEventListener('change', () => {
        const selectedOption = templateSelect.options[templateSelect.selectedIndex];
        const templatePath = selectedOption.value;
        if (templatePath) {
            originalCompose = composerize(templatePath);
            composeText.value = originalCompose;
            submitButton.disabled = false;
            undoButton.disabled = false;
        } else {
            originalCompose = '';
            composeText.value = '';
            submitButton.disabled = true;
            undoButton.disabled = true;
        }
    });

    undoButton.addEventListener('click', () => { composeText.value = originalCompose; });

    resetButton.addEventListener('click', () => {
        templateSelect.selectedIndex = 0;
        templateSelect.dispatchEvent(new Event('change'));
    });

    submitButton.addEventListener('click', () => {
        const name = templateSelect.options[templateSelect.selectedIndex].text;
        const compose = composeText.value;
        if (!name || !compose) {
            showNotification('Invalid Input', 'Please select a template and ensure the compose preview is not empty.');
            return;
        }
        makeApiRequest(name, compose);
    });
});
</script>
<!--
  Workaround for a JavaScript error caused by the 'Dynamix Web TTYd Manager' plugin.
-->
<div class="dwttm-footer-content" style="display: none;"></div>
</body>
</html>

<?php
// --- DIVIDER ---

// FILE: source/composerize/usr/local/emhttp/plugins/composerize/api.php
// NOTE: The declare(strict_types=1); line has been removed to ensure compatibility.
?>
<?php
/**
 * Installs a Docker Compose stack on Unraid.
 * This script handles a POST request to create and install a new stack.
 */

// --- Configuration and Helpers ---
define('PLUGIN_ROOT', '/usr/local/emhttp/plugins/composerize');

function send_json_response(int $statusCode, array $data): void {
    http_response_code($statusCode);
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode($data);
    exit;
}

// Use the lean helper file that doesn't load problematic dependencies.
require_once PLUGIN_ROOT . '/include/api_helpers.php';

// --- Main Execution ---
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    send_json_response(405, ['error' => 'Method Not Allowed. Only POST is accepted.']);
}

// --- Input Processing and Validation ---
$name    = $_POST['name'] ?? null;
$compose = $_POST['compose'] ?? null;
$force   = filter_var($_POST['force'] ?? 'false', FILTER_VALIDATE_BOOLEAN);

$sanitizedName = $name ? preg_replace('/[^a-zA-Z0-9_-]/', '', $name) : null;

if (empty($sanitizedName)) {
    send_json_response(400, ['error' => 'Invalid or missing stack name.']);
}
if ($sanitizedName !== $name) {
    send_json_response(400, ['error' => 'Stack name contains invalid characters.']);
}
if (empty($compose) || !isValidYaml($compose)) {
    send_json_response(400, ['error' => 'Invalid or missing Docker Compose YAML.']);
}

// --- Installation ---
try {
    $status = installCompose($sanitizedName, $compose, $force);

    if ($status) {
        send_json_response(200, [
            'success' => true,
            'message' => "Stack '{$sanitizedName}' installed successfully.",
            'force'   => $force,
        ]);
    } else {
        send_json_response(409, [
            'success' => false,
            'error'   => "Stack '{$sanitizedName}' already exists. Use 'force' to overwrite.",
            'force'   => $force,
        ]);
    }
} catch (Exception $e) {
    error_log("Composerize Plugin API Error: " . $e->getMessage());
    send_json_response(500, [
        'success' => false,
        'error'   => "An internal error occurred: " . $e->getMessage(),
    ]);
}

<?php
// --- DIVIDER ---

// FILE: source/composerize/usr/local/emhttp/plugins/composerize/include/composerize.php
// NOTE: The declare(strict_types=1); line has been removed to ensure compatibility.
?>
<?php
/**
 * composerize.php - Helper functions for the Composerize Unraid Plugin UI page.
 */

// --- Dependencies ---
require_once '/usr/local/emhttp/plugins/dynamix.docker.manager/include/DockerClient.php';
require_once '/usr/local/emhttp/plugins/dynamix.docker.manager/include/Helpers.php';

/**
 * Manually parses a Docker template XML and builds a 'docker run' command.
 */
function buildDockerRunCommand(SimpleXMLElement $xml): ?string
{
    if (!isset($xml->Name) || !isset($xml->Repository)) {
        return null;
    }

    $command = ['docker run'];
    $command[] = '--name=' . escapeshellarg((string)$xml->Name);

    if (isset($xml->Network) && (string)$xml->Network !== 'bridge') {
        $command[] = '--net=' . escapeshellarg((string)$xml->Network);
    }

    if (isset($xml->Privileged) && strtolower((string)$xml->Privileged) === 'true') {
        $command[] = '--privileged';
    }
    
    if (isset($xml->ExtraParams)) {
        $command[] = (string)$xml->ExtraParams;
    }

    if (isset($xml->Config)) {
        foreach ($xml->Config as $config) {
            $attributes = $config->attributes();
            $type = isset($attributes['Type']) ? (string)$attributes['Type'] : '';
            $value = (string)$config;

            if ($value === '' && isset($attributes['Default'])) {
                $value = (string)$attributes['Default'];
            }

            switch ($type) {
                case 'Port':
                    $hostPort = $value;
                    $containerPort = (string)$attributes['Target'];
                    if (!empty($hostPort) && !empty($containerPort)) {
                        $command[] = '-p ' . escapeshellarg($hostPort . ':' . $containerPort);
                    }
                    break;

                case 'Path':
                    $hostPath = $value;
                    $containerPath = (string)$attributes['Target'];
                    if (!empty($hostPath) && !empty($containerPath)) {
                        $command[] = '-v ' . escapeshellarg($hostPath . ':' . $containerPath);
                    }
                    break;
                
                case 'Variable':
                    $name = (string)$attributes['Target'];
                    if (isset($name) && $value !== '') {
                        $command[] = '-e ' . escapeshellarg($name . '=' . $value);
                    }
                    break;
            }
        }
    }

    $command[] = escapeshellarg((string)$xml->Repository);
    
    return implode(' ', array_filter($command));
}


/**
 * Gets a list of templates for currently running Docker containers.
 */
function getDockerTemplateList(): array
{
    $dockerTemplates = [];
    $dockerClient = new DockerClient();
    $containers = $dockerClient->getDockerContainers();
    $runningContainerNames = [];

    foreach ($containers as $container) {
        if (!empty($container['Running'])) {
            $runningContainerNames[] = $container['Name'];
        }
    }

    if (empty($runningContainerNames)) {
        error_log('Composerize Plugin: No running containers found.');
        return [];
    }

    $userTemplates = glob('/boot/config/plugins/dockerMan/templates-user/*.xml');
    $defaultTemplates = glob('/boot/config/plugins/dockerMan/templates/*.xml');
    $allTemplateFiles = array_merge($userTemplates ?: [], $defaultTemplates ?: []);

    if (empty($allTemplateFiles)) {
        error_log('Composerize Plugin: No template files found in user or default directories.');
        return [];
    }

    foreach ($allTemplateFiles as $file) {
        try {
            $xml = @simplexml_load_file($file);
            if ($xml === false || !isset($xml->Name)) {
                error_log("Composerize Plugin: Skipping malformed template file: {$file}");
                continue; 
            }
            $templateName = (string)$xml->Name;

            if (in_array($templateName, $runningContainerNames)) {
                $command = buildDockerRunCommand($xml);
                if ($command) {
                    $dockerTemplates[$templateName] = $command;
                } else {
                    error_log("Composerize Plugin: Failed to build command for template: {$file}");
                }
            }
        } catch (Throwable $t) {
            error_log("Composerize Plugin: Skipped template due to an unexpected error {$file}. Error: " . $t->getMessage());
        }
    }

    ksort($dockerTemplates);
    return $dockerTemplates;
}

<?php
// --- DIVIDER ---

// FILE: source/composerize/usr/local/emhttp/plugins/composerize/include/api_helpers.php
// NOTE: The declare(strict_types=1); line has been removed to ensure compatibility.
?>
<?php
/**
 * api_helpers.php - Lean helper functions specifically for the API endpoint.
 */

// --- Constants ---
define('COMPOSE_DIRECTORY', '/boot/config/plugins/compose.manager/projects/');

/**
 * Validates a given string to see if it's a non-empty YAML string.
 */
function isValidYaml(?string $yamlString): bool
{
    return !empty($yamlString);
}

/**
 * Installs a Docker Compose stack to the disk with detailed error handling.
 */
function installCompose(string $name, string $compose, bool $force): bool
{
    error_log("Composerize Trace: Inside installCompose() for stack '{$name}'.");
    
    $composeProjectDirectory = COMPOSE_DIRECTORY . $name;
    $composeYamlFilePath = $composeProjectDirectory . '/docker-compose.yml';
    $composeNameFilePath = $composeProjectDirectory . '/name';

    error_log("Composerize Trace: Project directory path: {$composeProjectDirectory}");

    if (!$force && (file_exists($composeProjectDirectory) || file_exists($composeYamlFilePath))) {
        error_log("Composerize Trace: Stack '{$name}' already exists and force is false. Aborting.");
        return false;
    }

    if (!is_dir($composeProjectDirectory)) {
        error_log("Composerize Trace: Directory does not exist. Attempting to create: {$composeProjectDirectory}");
        if (!@mkdir($composeProjectDirectory, 0755, true)) {
            $error = error_get_last();
            throw new Exception("Failed to create project directory. Check permissions for: " . COMPOSE_DIRECTORY . ". OS Error: " . ($error['message'] ?? 'Unknown error'));
        }
        error_log("Composerize Trace: Directory created successfully.");
    }

    error_log("Composerize Trace: Attempting to write name file: {$composeNameFilePath}");
    $nameWritten = file_put_contents($composeNameFilePath, $name);
    if ($nameWritten === false) {
        $error = error_get_last();
        throw new Exception("Failed to write 'name' file. Check permissions for: {$composeProjectDirectory}. OS Error: " . ($error['message'] ?? 'Unknown error'));
    }
    error_log("Composerize Trace: Name file written successfully.");

    error_log("Composerize Trace: Attempting to write YAML file: {$composeYamlFilePath}");
    $yamlWritten = file_put_contents($composeYamlFilePath, $compose);
    if ($yamlWritten === false) {
        $error = error_get_last();
        throw new Exception("Failed to write 'docker-compose.yml' file. Check permissions for: {$composeProjectDirectory}. OS Error: " . ($error['message'] ?? 'Unknown error'));
    }
    error_log("Composerize Trace: YAML file written successfully.");

    return true;
}
