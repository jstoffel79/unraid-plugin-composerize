---
Title="Composerize"
Icon="composerize.png"
Type="xmenu"
Menu="Utilities"
---
<?php
// Copyright 2022, ibay70
// This code is licensed under the MIT license (see LICENSE.md for details)
// Updated by Gemini for Unraid 7.1.4+ compatibility, theming, and bug fixes.

define('PLUGIN_ROOT', '/plugins/composerize');
define('PLUGIN_API_URL', PLUGIN_ROOT . '/api.php');

// Suppress errors and try to include
$templates = [];
try {
    @require_once '/usr/local/emhttp' . PLUGIN_ROOT . '/include/composerize.php';
    if (function_exists('getDockerTemplateList')) {
        $templates = getDockerTemplateList();
    }
} catch (Throwable $e) {
    error_log("Composerize Plugin Error: " . $e->getMessage());
}
?>

<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/plugins/dynamix/styles/dropdownchecklist.css')?>">
<style>
/* Unraid-compatible styles */
.composerize-container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
}

.composerize-panel {
    background: rgba(var(--accent-bg), 0.33);
    border: 1px solid rgba(var(--accent-bg), 0.5);
    border-radius: 5px;
    padding: 20px;
    margin-bottom: 20px;
}

.composerize-panel h3 {
    margin-top: 0;
    color: var(--text-bright);
    border-bottom: 1px solid rgba(var(--accent-bg), 0.5);
    padding-bottom: 10px;
}

select, textarea, button {
    font-family: inherit;
    font-size: 13px;
}

#template-select {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
}

#compose-text {
    width: 100%;
    height: 400px;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    padding: 10px;
    border: 1px solid #ccc;
    resize: vertical;
}

.button-group {
    margin-top: 15px;
}

.button-group button {
    margin-right: 10px;
    padding: 8px 16px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

#submit-button {
    background: #4a90e2;
    color: white;
}

#submit-button:hover:not(:disabled) {
    background: #357abd;
}

#submit-button:disabled {
    background: #ccc;
    cursor: not-allowed;
}

#undo-button {
    background: #f5a623;
    color: white;
}

#undo-button:hover:not(:disabled) {
    background: #e6941a;
}

#reset-button {
    background: #d0021b;
    color: white;
}

#reset-button:hover {
    background: #b8021a;
}

#status-message {
    padding: 10px;
    margin: 10px 0;
    border-radius: 3px;
    display: none;
    text-align: center;
}

#status-message.success {
    background: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
}

#status-message.error {
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    color: #721c24;
}
</style>

<div class="composerize-container">
    <div class="composerize-panel">
        <h3>Select a Running Container Template</h3>
        <select id="template-select">
            <option value="" selected>Choose a template...</option>
            <?php foreach ($templates as $name => $command): ?>
                <option value="<?= htmlspecialchars($command); ?>"><?= htmlspecialchars($name); ?></option>
            <?php endforeach; ?>
        </select>
        <?php if (empty($templates)): ?>
            <p><em>No running container templates found. Make sure you have Docker containers running and templates available.</em></p>
        <?php else: ?>
            <p>Found <?= count($templates); ?> running container templates.</p>
        <?php endif; ?>
    </div>
    
    <div class="composerize-panel">
        <h3>Docker Compose Preview</h3>
        <form id="compose-form">
            <textarea id="compose-text" name="compose" spellcheck="false" placeholder="Select a template above to generate Docker Compose YAML..."></textarea>
            <input type="hidden" id="stack-name" name="name" value="">
            
            <div id="status-message"></div>
            
            <div class="button-group">
                <button type="submit" id="submit-button" disabled>Apply Stack</button>
                <button type="button" id="undo-button" disabled>Revert Changes</button>
                <button type="button" id="reset-button">Reset</button>
            </div>
        </form>
    </div>
</div>

<script src="<?= htmlspecialchars(PLUGIN_ROOT); ?>/js/composerize.min.js"></script>
<script>
$(function() {
    // Wait for both jQuery and composerize to be ready
    if (typeof composerize !== 'function') {
        console.error('composerize function not available');
        $('#status-message').text('Error: composerize library not loaded').addClass('error').show();
        return;
    }

    var originalCompose = '';
    var $templateSelect = $('#template-select');
    var $composeText = $('#compose-text');
    var $submitButton = $('#submit-button');
    var $undoButton = $('#undo-button');
    var $resetButton = $('#reset-button');
    var $stackNameInput = $('#stack-name');
    var $form = $('#compose-form');
    var $statusMessage = $('#status-message');

    function showStatus(message, type) {
        type = type || 'success';
        $statusMessage.removeClass('success error').addClass(type).text(message).show();
        setTimeout(function() {
            $statusMessage.fadeOut();
        }, 5000);
    }

    function handleApply(event) {
        event.preventDefault();
        var name = $stackNameInput.val();
        var compose = $composeText.val();

        if (!name || !compose) {
            showStatus('Please select a template first.', 'error');
            return;
        }

        $submitButton.prop('disabled', true).text('Applying...');

        $.ajax({
            url: "<?= htmlspecialchars(PLUGIN_API_URL); ?>",
            method: 'POST',
            data: {
                name: name,
                compose: compose,
                force: 'false'
            },
            timeout: 30000
        })
        .done(function(data) {
            showStatus(data, 'success');
        })
        .fail(function(xhr) {
            var errorMsg = xhr.responseText || 'Unknown error occurred';
            console.error('Error applying compose stack:', errorMsg);
            showStatus('Error: ' + errorMsg, 'error');
        })
        .always(function() {
            $submitButton.prop('disabled', false).text('Apply Stack');
        });
    }

    $form.on('submit', handleApply);

    $templateSelect.on('change', function() {
        var selectedOption = this.options[this.selectedIndex];
        var command = selectedOption.value;
        
        if (command) {
            try {
                originalCompose = composerize(command);
                $composeText.val(originalCompose);
                $stackNameInput.val(selectedOption.text);
                $submitButton.prop('disabled', false);
                $undoButton.prop('disabled', false);
                $statusMessage.hide();
            } catch (e) {
                console.error('Conversion error:', e);
                showStatus('Error generating compose: ' + e.message, 'error');
                originalCompose = '';
                $composeText.val('Could not parse the docker run command for this template.\n\n' + command);
                $submitButton.prop('disabled', true);
                $undoButton.prop('disabled', true);
            }
        } else {
            originalCompose = '';
            $composeText.val('');
            $stackNameInput.val('');
            $submitButton.prop('disabled', true);
            $undoButton.prop('disabled', true);
            $statusMessage.hide();
        }
    });

    $undoButton.on('click', function() {
        $composeText.val(originalCompose);
    });

    $resetButton.on('click', function() {
        $templateSelect.prop('selectedIndex', 0).trigger('change');
    });
});
</script>
