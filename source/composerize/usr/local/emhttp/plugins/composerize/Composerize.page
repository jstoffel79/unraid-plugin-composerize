<?php
/**
 * Composerize Plugin UI for Unraid 7.
 *
 * This script generates the user interface for selecting a Docker template
 * and converting it into a Docker Compose file. It uses modern HTML,
 * vanilla JavaScript, and updated styling.
 *
 * It assumes the presence of a getDockerTemplateList() function which
 * should be loaded from a helper file.
 */

// --- Configuration ---
declare(strict_types=1);

// Define constants for paths to make the code cleaner and easier to maintain.
define('PLUGIN_ROOT', '/plugins/composerize');
define('PLUGIN_API_URL', PLUGIN_ROOT . '/api.php');

// It's good practice to include dependencies at the top.
// Ensure this file defines getDockerTemplateList().
require_once '/usr/local/emhttp' . PLUGIN_ROOT . '/include/composerize.php';

?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Composerize</title>
    <style>
        /* Modern CSS for a clean and responsive layout */
        :root {
            --primary-bg: #2d3748; /* slate-800 */
            --secondary-bg: #4a5568; /* slate-600 */
            --border-color: #718096; /* slate-500 */
            --text-color: #e2e8f0; /* slate-200 */
            --accent-color: #38a169; /* green-500 */
            --error-color: #c53030; /* red-600 */
            --font-family: 'Inter', sans-serif;
            --monospace-font: 'Fira Code', 'Cascadia Code', monospace;
        }
        body {
            font-family: var(--font-family);
            background-color: var(--primary-bg);
            color: var(--text-color);
            margin: 0;
            padding: 1.5rem;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        .panel {
            background-color: var(--secondary-bg);
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);
        }
        h2 {
            margin-top: 0;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
            font-weight: 600;
        }
        select, textarea, button {
            width: 100%;
            padding: 0.75rem;
            border-radius: 0.375rem;
            border: 1px solid var(--border-color);
            background-color: var(--primary-bg);
            color: var(--text-color);
            font-size: 1rem;
            transition: all 0.2s ease-in-out;
        }
        select:focus, textarea:focus, button:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(56, 161, 105, 0.4);
        }
        textarea {
            font-family: var(--monospace-font);
            min-height: 400px;
            resize: vertical;
        }
        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }
        button {
            cursor: pointer;
            font-weight: 600;
            border: none;
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        #submit-button { background-color: var(--accent-color); }
        #undo-button { background-color: #d69e2e; } /* yellow-600 */
        #reset-button { background-color: #9b2c2c; } /* red-700 */

        /* Custom Modal for Notifications */
        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.6); display: flex;
            align-items: center; justify-content: center; z-index: 1000;
            opacity: 0; transition: opacity 0.3s ease; pointer-events: none;
        }
        .modal-overlay.visible { opacity: 1; pointer-events: auto; }
        .modal-content {
            background: var(--secondary-bg); padding: 2rem; border-radius: 0.5rem;
            text-align: center; max-width: 400px; transform: scale(0.9);
            transition: transform 0.3s ease;
        }
        .modal-overlay.visible .modal-content { transform: scale(1); }
        .modal-buttons { margin-top: 1.5rem; display: flex; gap: 1rem; justify-content: center; }
        .modal-buttons button { width: auto; padding: 0.5rem 1.5rem; }
    </style>
    <!-- Using a modern font from Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Fira+Code&display=swap" rel="stylesheet">
</head>
<body>

<div class="container">
    <div class="panel">
        <h2>Select a Template</h2>
        <select id="template-select">
            <option value="" selected>Choose a template...</option>
            <?php foreach (getDockerTemplateList() as $name => $xmlPath): ?>
                <option value="<?= htmlspecialchars($xmlPath); ?>"><?= htmlspecialchars($name); ?></option>
            <?php endforeach; ?>
        </select>
    </div>

    <div class="panel">
        <h2>Compose Preview</h2>
        <textarea id="compose-text" spellcheck="false" placeholder="Select a template to see the Docker Compose preview..."></textarea>
        <div class="button-group">
            <button id="submit-button" disabled>Apply</button>
            <button id="undo-button" disabled>Revert Changes</button>
            <button id="reset-button">Reset</button>
        </div>
    </div>
</div>

<!-- Modal for notifications and confirmations -->
<div id="notification-modal" class="modal-overlay">
    <div class="modal-content">
        <h3 id="modal-title"></h3>
        <p id="modal-text"></p>
        <div id="modal-buttons" class="modal-buttons"></div>
    </div>
</div>

<script src="<?= htmlspecialchars(PLUGIN_ROOT); ?>/js/composerize.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- Element References ---
    const templateSelect = document.getElementById('template-select');
    const composeText = document.getElementById('compose-text');
    const submitButton = document.getElementById('submit-button');
    const undoButton = document.getElementById('undo-button');
    const resetButton = document.getElementById('reset-button');

    // --- State Management ---
    let originalCompose = ''; // Store the initial generated compose content

    // --- API and Notifications ---
    const showNotification = (title, text, buttons = [{ label: 'OK', action: hideNotification }]) => {
        document.getElementById('modal-title').textContent = title;
        document.getElementById('modal-text').textContent = text;
        const modalButtons = document.getElementById('modal-buttons');
        modalButtons.innerHTML = ''; // Clear previous buttons
        buttons.forEach(btnInfo => {
            const button = document.createElement('button');
            button.textContent = btnInfo.label;
            button.onclick = btnInfo.action;
            if (btnInfo.class) button.className = btnInfo.class;
            modalButtons.appendChild(button);
        });
        document.getElementById('notification-modal').classList.add('visible');
    };

    const hideNotification = () => {
        document.getElementById('notification-modal').classList.remove('visible');
    };

    const makeApiRequest = async (name, compose, force = false) => {
        try {
            const formData = new FormData();
            formData.append('name', name);
            formData.append('compose', compose);
            formData.append('force', force);

            const response = await fetch('<?= htmlspecialchars(PLUGIN_API_URL); ?>', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (response.ok) {
                showNotification('Success!', result.message);
            } else if (response.status === 409) { // Conflict - stack exists
                showNotification('Stack Exists', result.error, [
                    { label: 'Cancel', action: hideNotification },
                    { label: 'Overwrite', class: 'error', action: () => {
                        hideNotification();
                        makeApiRequest(name, compose, true);
                    }}
                ]);
            } else {
                // Handle other client/server errors (400, 500)
                showNotification('Error!', result.error || 'An unknown error occurred.');
            }
        } catch (error) {
            console.error('API Request Failed:', error);
            showNotification('Network Error', 'Could not connect to the server.');
        }
    };

    // --- Event Listeners ---
    templateSelect.addEventListener('change', () => {
        const selectedOption = templateSelect.options[templateSelect.selectedIndex];
        const templatePath = selectedOption.value;

        if (templatePath) {
            // The composerize function is from composerize.min.js
            originalCompose = composerize(templatePath);
            composeText.value = originalCompose;
            submitButton.disabled = false;
            undoButton.disabled = false;
        } else {
            originalCompose = '';
            composeText.value = '';
            submitButton.disabled = true;
            undoButton.disabled = true;
        }
    });

    undoButton.addEventListener('click', () => {
        composeText.value = originalCompose;
    });

    resetButton.addEventListener('click', () => {
        templateSelect.selectedIndex = 0;
        // Manually trigger the change event to reset the UI state
        templateSelect.dispatchEvent(new Event('change'));
    });

    submitButton.addEventListener('click', () => {
        const name = templateSelect.options[templateSelect.selectedIndex].text;
        const compose = composeText.value;
        if (!name || !compose) {
            showNotification('Invalid Input', 'Please select a template and ensure the compose preview is not empty.');
            return;
        }
        makeApiRequest(name, compose);
    });

    console.log('Composerize UI Ready!');
});
</script>

</body>
</html>
